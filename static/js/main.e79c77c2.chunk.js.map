{"version":3,"sources":["SortingViz/Navbar.jsx","SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingViz/SortingViz.jsx","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/SelectionSort.js","App.js","serviceWorker.js","index.js"],"names":["height_of_window","window","innerHeight","Navbar","props","PushRandomNumber","sortingOver","initialSort","array","i","push","randomNoFromInterval","bars","document","getElementsByClassName","length","style","backgroundColor","setState","doMerge","e","mergeSort","state","doBubble","bubbleSort","doSelection","selectionSort","doQuick","quickSort","this","min","max","Math","floor","random","className","Button","key","onClick","role","aria-label","map","value","index","title","height","Component","MergeSortAnimation","animations","copyOfArray","slice","temp","start","end","mid","k","j","merge","QuickSortAnimation","l","h","partitionIndex","piv","t","partition","Total_time","Sorter","SortingOver","colorBars","setTimeout","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","barOneValue","n","BubbleSortAnimation","barOneHeight","barTwoHeight","barColor","barTwoValue","tempVariable","SelectionSortAnimation","console","log","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e79c77c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst No_Of_Array_Bars = 44; \r\nconst Primary_Color = 'turquoise';\r\nvar height_of_window= window.innerHeight;\r\n \r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.PushRandomNumber();\r\n    }\r\n\r\n    PushRandomNumber = () => {\r\n        if (\r\n          this.props.sortingOver === true || this.props.initialSort === true) \r\n          {\r\n          const array = [];\r\n          for (let i = 0; i < No_Of_Array_Bars ; i++) {\r\n           array.push(this.randomNoFromInterval(6,  height_of_window - 90));\r\n          }\r\n          \r\n          let bars = document.getElementsByClassName(\"array-bar\");\r\n          //change color to blue\r\n          for (let i = 0; i < bars.length; i++)\r\n            bars[i].style.backgroundColor = Primary_Color;\r\n    \r\n          this.setState({ array });\r\n        }\r\n      };\r\n      \r\n    randomNoFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }  \r\n\r\n    doMerge = (e) => {\r\n        this.props.mergeSort(this.state.array);\r\n      };\r\n\r\n    doBubble = (e) => {\r\n        this.props.bubbleSort(this.state.array)\r\n    };\r\n\r\n    doSelection = (e) => {\r\n        this.props.selectionSort(this.state.array)\r\n    };\r\n\r\n    doQuick = (e) => {\r\n        this.props.quickSort(this.state.array)\r\n    };\r\n\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n        return (\r\n          <div className=\"parent\">\r\n              <nav className=\"navbar navbar-dark bg-dark\">\r\n              <div className=\"navbar-header\">\r\n                  \r\n                  <Button\r\n                    className=\"btn btn-outline-light btn-secondary navbar-btn\"\r\n                    key={this.props.sortingOver}\r\n                    onClick={this.PushRandomNumber}\r\n                  >\r\n                    Generate New Array\r\n                  </Button>\r\n                </div>\r\n    \r\n                <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n                  \r\n                  <Button\r\n                    className=\"btn btn-outline-info btn-dark\"\r\n                    onClick={() => this.doMerge()}\r\n                  >\r\n                    Merge Sort\r\n                  </Button>\r\n          \r\n\r\n                  <Button\r\n                    className=\"btn btn-outline-info btn-dark\"\r\n                    onClick={() => this.doBubble()}\r\n                  >\r\n                    Bubble Sort\r\n                  </Button>\r\n    \r\n                  <Button\r\n                    className=\"btn btn-outline-info btn-dark\"\r\n                    onClick={() => this.doSelection()}\r\n                  >\r\n                    Selection Sort\r\n                  </Button>\r\n    \r\n                  <Button\r\n                    className=\"btn btn-outline-info btn-dark\"\r\n                    onClick={() => this.doQuick()}\r\n                  >\r\n                    Quick Sort\r\n                  </Button>\r\n                </div>\r\n            </nav>\r\n    \r\n            <div className=\"array-container\">\r\n                {array.map((value, index) => (\r\n                <div className=\"array-bar\"\r\n                     title={value} \r\n                     key={index}\r\n                     style={{\r\n                         backgroundColor: Primary_Color,\r\n                         height: `${value}px`,\r\n                    }}>\r\n                      \r\n                </div>\r\n              )\r\n            )}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Navbar;","export function MergeSortAnimation(array) {\r\n    const animations = []; \r\n    const copyOfArray = array.slice(); \r\n    const temp = array.slice(); \r\n    mergeSort(copyOfArray, 0, array.length - 1, temp, animations); \r\n    return animations; \r\n  }\r\n  \r\n  function mergeSort(copyOfArray, start, end, temp, animations) {\r\n    if (start < end){\r\n      const mid = Math.floor((start + end) / 2); \r\n      mergeSort(temp, start, mid, copyOfArray, animations);\r\n      mergeSort(temp, mid + 1, end, copyOfArray, animations);\r\n      merge(copyOfArray, start, mid, end, temp, animations);\r\n    }\r\n  }\r\n  \r\n  function merge(copyOfArray, start, mid, end, temp, animations) { \r\n    let k = start;\r\n    let i = start; \r\n    let j = mid + 1;\r\n    while (i <= mid && j <= end) {\r\n     \r\n      animations.push([i, j]);\r\n     \r\n      animations.push([i, j]);\r\n      if (temp[i] <= temp[j]) {\r\n       \r\n        animations.push([k, temp[i]]);\r\n        copyOfArray[k++] = temp[i++];\r\n      } else {\r\n        \r\n        animations.push([k, temp[j]]);\r\n        copyOfArray[k++] = temp[j++];\r\n      }\r\n    }\r\n    while (i <= mid) {\r\n     \r\n      animations.push([i, i]);\r\n      \r\n      animations.push([i, i]);\r\n     \r\n      animations.push([k, temp[i]]);\r\n      copyOfArray[k++] = temp[i++];\r\n    }\r\n    while (j <= end) {\r\n     \r\n      animations.push([j, j]);\r\n     \r\n      animations.push([j, j]);\r\n     \r\n      animations.push([k, temp[j]]);\r\n      copyOfArray[k++] = temp[j++];\r\n    }\r\n  }","export function QuickSortAnimation(array) {\r\n    const temp = array.slice();\r\n    const animations = [];\r\n    quickSort(temp, 0, array.length - 1, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function quickSort(temp, l, h, animations) {\r\n    if (l < h) {\r\n      //Last element taken as pivot\r\n      let partitionIndex = partition(temp, l, h, animations);\r\n      quickSort(temp, l, partitionIndex - 1, animations);\r\n      quickSort(temp, partitionIndex + 1, h, animations);\r\n    }\r\n  }\r\n  \r\n  function partition(temp, l, h, animations) {\r\n    let piv = temp[h],\r\n      i = l - 1,\r\n      j;\r\n  \r\n    //push pivot, also passing color from here makes it easy to understand\r\n    animations.push([temp[h], h, 0, 0, \"orange\"]);\r\n  \r\n    for (j = l; j < h; j++) {\r\n      if (temp[j] < piv) {\r\n        i++;\r\n  \r\n        //swap\r\n        animations.push([temp[j], j, temp[i], i, \"red\"]);\r\n  \r\n        let t = temp[j];\r\n        temp[j] = temp[i];\r\n        temp[i] = t;\r\n  \r\n        animations.push([temp[j], j, temp[i], i, \"turquoise\"]);\r\n      }\r\n    }\r\n  \r\n    animations.push([temp[h], h, temp[i + 1], i + 1, \"red\"]);\r\n  \r\n    let t = temp[h];\r\n    temp[h] = temp[i + 1];\r\n    temp[i + 1] = t;\r\n  \r\n    animations.push([temp[h], h, temp[i + 1], i + 1, \"turquoise\"]);\r\n  \r\n    //pivot back to normal\r\n    animations.push([temp[h], h, 0, 0, \"turquoise\"]);\r\n  \r\n    return i + 1;\r\n  }","import React, { Component } from 'react';\r\nimport Navbar from '../SortingViz/Navbar';\r\nimport './SortingViz.css';\r\nimport {MergeSortAnimation} from '../SortingAlgorithms/MergeSort'; \r\nimport {BubbleSortAnimation} from '../SortingAlgorithms/BubbleSort';\r\nimport {SelectionSortAnimation} from '../SortingAlgorithms/SelectionSort';\r\nimport {QuickSortAnimation} from '../SortingAlgorithms/QuickSort';\r\n\r\nconst Primary_Color = 'turquoise';\r\nconst Speed_Of_Animation = 85; //in milliseconds\r\nconst Secondary_Color = 'Red';\r\nconst Color_After_Sorting = 'seagreen';\r\n\r\n\r\nvar initialSort = true;\r\nvar Total_time;\r\n\r\nexport default class Sorter extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        sortingOver: false,\r\n      };\r\n    }\r\n\r\n    SortingOver = () => {\r\n        let colorBars = document.getElementsByClassName(\"array-bar\");\r\n        var i =0;\r\n        setTimeout( () => {\r\n            for (i=0; i<colorBars.length; i++)\r\n              colorBars[i].style.backgroundColor = Color_After_Sorting;\r\n              this.setState({sortingOver: true});\r\n        }, Total_time * Speed_Of_Animation);\r\n    }\r\n\r\n    mergeSort = (array) => {\r\n        if (this.state.sortingOver || initialSort) {\r\n            initialSort = false;\r\n            this.setState({ sortingOver: false });\r\n            const animations = MergeSortAnimation(array);\r\n            \r\n            for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n    \r\n            if (isColorChange) {\r\n              const [barOneIdx, barTwoIdx] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n              const color = i % 3 === 0 ? Secondary_Color : Primary_Color;\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * Speed_Of_Animation);\r\n            } \r\n            else {\r\n              setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barOneValue = arrayBars[barOneIdx];\r\n                barOneStyle.height = `${newHeight}px`;\r\n                barOneValue.title = newHeight;\r\n                \r\n              }, i * Speed_Of_Animation);\r\n            }\r\n            Total_time = i;\r\n            }\r\n            this.setState({ array });\r\n            this.SortingOver();\r\n        }\r\n    };\r\n\r\n    bubbleSort = (array) => {\r\n        if (this.state.sortingOver || initialSort) {\r\n            initialSort = false;\r\n            this.setState({ sortingOver: false });\r\n            const animations = BubbleSortAnimation(array);\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n             const [\r\n             barOneHeight,\r\n             barOneIdx,\r\n             barTwoHeight,\r\n             barTwoIdx,\r\n             barColor,\r\n            ] = animations[i];\r\n\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const barOneValue = arrayBars[barOneIdx];\r\n            const barTwoValue = arrayBars[barTwoIdx];\r\n\r\n            setTimeout(() => {\r\n            barOneStyle.height = `${barOneHeight}px`;\r\n            barTwoStyle.height = `${barTwoHeight}px`;\r\n            barOneStyle.backgroundColor = barColor;\r\n            barTwoStyle.backgroundColor = barColor;\r\n            barOneValue.title = barOneHeight;\r\n            barTwoValue.title = barTwoHeight;\r\n            }, i * Speed_Of_Animation);\r\n            Total_time = i;\r\n            }\r\n            this.setState({ array });\r\n            this.SortingOver();\r\n        }\r\n    };\r\n \r\n    selectionSort = (array) => {\r\n        if (this.state.sortingOver || initialSort) {\r\n            initialSort = false;\r\n            this.setState({ sortingOver: false });\r\n            const animations = SelectionSortAnimation(array);\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            \r\n            var i = 0;\r\n            for (i = 0; i < animations.length; i++) {\r\n              const [\r\n                barOneHeight,\r\n                barOneIdx,\r\n                barTwoHeight,\r\n                barTwoIdx,\r\n                barColor,\r\n              ] = animations[i];\r\n      \r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n              const barOneValue = arrayBars[barOneIdx];\r\n              const barTwoValue = arrayBars[barTwoIdx];\r\n      \r\n              //no swapping required only red color to be highlighted to search the minimum element\r\n              if (barTwoHeight === 0) {\r\n                setTimeout(() => {\r\n                  barOneStyle.backgroundColor = barColor;\r\n                }, i * Speed_Of_Animation);\r\n              }\r\n              //swap minimum element with left index\r\n              else {\r\n                setTimeout(() => {\r\n                  barOneStyle.height = `${barOneHeight}px`;\r\n                  barTwoStyle.height = `${barTwoHeight}px`;\r\n                  barOneStyle.backgroundColor = barColor;\r\n                  barTwoStyle.backgroundColor = barColor;\r\n                  barOneValue.title = barOneHeight;\r\n                  barTwoValue.title = barTwoHeight;\r\n                }, i * Speed_Of_Animation);\r\n              }\r\n            }\r\n            Total_time=i;\r\n            this.setState({ array });\r\n            this.SortingOver();\r\n        }\r\n    };\r\n\r\n    quickSort = (array) => {\r\n        if (this.state.sortingOver || initialSort) {\r\n            initialSort = false;\r\n            this.setState({ sortingOver: false });\r\n            const animations = QuickSortAnimation(array);\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            \r\n            var i = 0;\r\n            for (i = 0; i < animations.length; i++) {\r\n            const [\r\n            barOneHeight,\r\n            barOneIdx,\r\n            barTwoHeight,\r\n            barTwoIdx,\r\n            barColor,\r\n            ] = animations[i];\r\n\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const barOneValue = arrayBars[barOneIdx];\r\n            const barTwoValue = arrayBars[barTwoIdx];\r\n\r\n            if (barTwoHeight === 0) {\r\n             setTimeout(() => {\r\n                barOneStyle.backgroundColor = barColor;\r\n             }, i * Speed_Of_Animation);\r\n            } \r\n            else {\r\n                console.log(\r\n                \"barOne : \",\r\n                barOneHeight,\r\n                \"barTwo : \",\r\n                barTwoHeight,\r\n                barColor\r\n                );\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${barOneHeight}px`;\r\n                    barTwoStyle.height = `${barTwoHeight}px`;\r\n                    barOneStyle.backgroundColor = barColor;\r\n                    barTwoStyle.backgroundColor = barColor;\r\n                    barOneValue.title = barOneHeight;\r\n                    barTwoValue.title = barTwoHeight;\r\n                }, i * Speed_Of_Animation);\r\n            }\r\n            }\r\n\r\n        Total_time = i;\r\n        }\r\n        this.setState({ array });\r\n        this.SortingOver();\r\n    };\r\n\r\n        \r\n      render() {\r\n        return (\r\n          <div>\r\n            <Navbar\r\n              mergeSort={this.mergeSort}\r\n              bubbleSort={this.bubbleSort}\r\n              selectionSort={this.selectionSort}\r\n              quickSort={this.quickSort}\r\n              sortingOver={this.state.sortingOver}\r\n              initialSort={initialSort}\r\n            />\r\n          </div>\r\n        ); //We pass the functions as props to the navbar class and use them using this.props\r\n    }\r\n\r\n}","\r\nexport function BubbleSortAnimation(array) {\r\n    //copy original array to a temporary array\r\n    const temp = array.slice();\r\n    const animations = [];\r\n    bubbleSort(array.length, animations, temp);\r\n    return animations;\r\n  }\r\n  \r\n  function bubbleSort(n, animations, temp) {\r\n    for (let i = 0; i < n - 1; i++) {\r\n      for (let j = 0; j < n - i - 1; j++) {\r\n        if (temp[j] > temp[j + 1]) {\r\n          //i and i+1 turn red before swap\r\n          animations.push([temp[j], j, temp[j + 1], j + 1, \"red\"]);\r\n  \r\n          //swap\r\n          var t = temp[j + 1];\r\n          temp[j + 1] = temp[j];\r\n          temp[j] = t;\r\n  \r\n          //i and i+1 turn to original color after swap\r\n          animations.push([temp[j], j, temp[j + 1], j + 1, \"turquoise\"]);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return animations;\r\n  }","export function SelectionSortAnimation(array) {\r\n    const temp = array.slice();\r\n    const animations = [];\r\n    selectionSort(array.length, temp, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function selectionSort(n, temp, animations) {\r\n    var min,\r\n      tempVariable = 0;\r\n  \r\n    for (var i = 0; i < n - 1; i++) {\r\n      min = i;\r\n      for (var j = i + 1; j < n; j++) {\r\n        //leftmost element to be compared has to be highlighted with orange\r\n        animations.push([temp[i], i, 0, 0, \"orange\"]);\r\n  \r\n        //to blink element from left to right while searching for minimum element\r\n        animations.push([temp[j], j, 0, 0, \"red\"]);\r\n        animations.push([temp[j], j, 0, 0, \"turquoise\"]);\r\n  \r\n        if (temp[j] < temp[min]) {\r\n          //change the color of previously found minimum element back to blue color\r\n          animations.push([temp[min], min, 0, 0, \"turquoise\"]);\r\n          min = j;\r\n          //minimum element found, highlight it by orange color\r\n          animations.push([temp[min], min, 0, 0, \"orange\"]);\r\n        }\r\n      }\r\n      //swap the leftmost element with minimum element by highlighting once and changing back to blue\r\n      animations.push([temp[i], min, temp[min], i, \"orange\"]);\r\n      animations.push([temp[i], min, temp[min], i, \"turquoise\"]);\r\n  \r\n      tempVariable = temp[i];\r\n      temp[i] = temp[min];\r\n      temp[min] = tempVariable;\r\n    }\r\n  }","import React from 'react';\nimport SortingViz from './SortingViz/SortingViz';\n\n\nfunction App() {\n  return (\n    <div className='App'>\n      <SortingViz> </SortingViz>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}